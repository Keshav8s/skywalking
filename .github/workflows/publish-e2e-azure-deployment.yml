# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: E2E deployment using CI/CD for SkyWalking

on:
  push:
    branches:
      - skywalking-azure

jobs:
  build-and-push:
    if: github.repository == 'Keshav8s/skywalking'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    timeout-minutes: 90
    env:
      TAG: ${{ github.sha }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2
      with:
        submodules: true

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        driver-opts: network=host,buildkitd-flags=--oci-worker-snapshotter=native


    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Load Environment Variables
      run: source docker/.env

    # - name: Set DIST variable
    #   run: echo "DIST=apache-skywalking-apm-bin.tar.gz" >> $GITHUB_ENV

    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        
    - name: Cache build artifacts for make docker
      uses: actions/cache@v3
      id: build-cache
      with:
        path: |
          ~/.m2
          dist/*
        key: ${{ runner.os }}-make-docker-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-make-docker-
          

    - name: Run `make docker` to generate distribution tarball
      run: make docker SKIP_TEST=true
      if: steps.build-cache.outputs.cache-hit != 'true'
    
    
    - name: Check if OAP Docker Image exists
      id: check-oap-image
      run: |
        if docker pull ghcr.io/keshav8s/skywalking/oap:${{ github.sha }}; then
          echo "OAP image exists"
          echo "IMAGE_EXISTS=true" >> $GITHUB_ENV
        else
          echo "OAP image does not exist"
          echo "IMAGE_EXISTS=false" >> $GITHUB_ENV
        fi

    - name: Build OAP Docker Image
      if: env.IMAGE_EXISTS == 'false'
      uses: docker/build-push-action@v2
      with:
        context: ./docker
        file: ./docker/oap/Dockerfile
        push: true
        tags: ghcr.io/keshav8s/skywalking/oap:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
      
    - name: Build UI Docker Image
      uses: docker/build-push-action@v2
      with:
        context: ./docker
        file: ./docker/ui/Dockerfile
        push: true
        tags: ghcr.io/keshav8s/skywalking/ui:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Push UI Docker Image
      run: |
        docker push ghcr.io/keshav8s/skywalking/ui:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: SSH into Azure VM and Deploy
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.VM_IP }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ~/skywalking
          
            # Pull the latest code
            git pull origin main
          
            cd ~/skywalking/docker
            # Pull the pre-built Docker image from GitHub Container Registry
            docker pull ghcr.io/${{ github.actor }}/skywalking:${{ github.sha }}
      
            # Update Docker Compose to use the pulled image
            sed -i 's|image: .*|image: ghcr.io/${{ github.actor }}/skywalking:${{ github.sha }}|' docker/docker-compose.yml
  
            # Run the updated containers
            cd docker
            docker-compose --profile elasticsearch up -d
